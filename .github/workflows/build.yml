name: "Build KernelSU for thyme"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Build-KernelSU:
    name: "🐎 DogDay-KernelSU (thyme)"
    runs-on: ubuntu-latest

    env:
      kernelName: "DogDay-KernelSU"
      kernelRepo: "https://github.com/PixelExperience-Devices/kernel_xiaomi_oxygen"
      kernelBranch: "thirteen"
      kernelDevice: "oxygen"
      DEFCONFIG_NAME: "oxygen_defconfig"
      ARCH: "arm64"
      CROSS_COMPILE: "aarch64-linux-gnu-"
      CROSS_COMPILE_ARM32: "arm-linux-gnueabi-"
      CLANG_TRIPLE: "aarch64-linux-gnu-"
      CC: "clang"
      AR: "llvm-ar"
      LD: "ld.lld"

    steps:
      - name: "✨ Checkout"
        uses: actions/checkout@v4

      - name: "⭐ Install prerequisites"
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            bc bison build-essential curl flex git libssl-dev libelf-dev \
            libncurses5-dev lz4 liblz4-dev python3 wget unzip device-tree-compiler \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi llvm lld

      - name: "🌟 Clone kernel source"
        run: |
          git clone --depth=1 --branch ${{ env.kernelBranch }} ${{ env.kernelRepo }} ${{ env.kernelName }}

      - name: "🛠️ Clone toolchains"
        run: |
          git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gas/linux-x86 gas
          git clone --depth=1 -b 11 https://gitlab.com/ThankYouMario/android_prebuilts_clang-standalone clang

      - name: "🔧 Setup PATH"
        run: |
          echo "$(pwd)/gas"          >> $GITHUB_PATH
          echo "$(pwd)/clang/bin"    >> $GITHUB_PATH

      - name: "😋 Patch KernelSU"
        working-directory: ${{ env.kernelName }}
        run: |
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -

          # 针对 ≤5.4 内核补丁
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/.github/patches/5.4/0001-kernel-5.4.patch" | patch -p1

          # 必要配置
          {
            echo "CONFIG_KPROBES=y"
            echo "CONFIG_HAVE_KPROBES=y"
            echo "CONFIG_KPROBE_EVENTS=y"
            echo "CONFIG_OVERLAY_FS=y"
            echo "CONFIG_SECURITY_SELINUX=y"
          } >> arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "👍 Make defconfig"
        working-directory: ${{ env.kernelName }}
        run: |
          make O=${{ env.OUT_DIR }} ${{ env.DEFCONFIG_NAME }} \
            ARCH=${{ env.ARCH }} \
            CROSS_COMPILE=${{ env.CROSS_COMPILE }} \
            CROSS_COMPILE_ARM32=${{ env.CROSS_COMPILE_ARM32 }} \
            CLANG_TRIPLE=${{ env.CLANG_TRIPLE }} \
            CC=${{ env.CC }} \
            AR=${{ env.AR }} \
            LD=${{ env.LD }}

      - name: "🎶 Build kernel"
        working-directory: ${{ env.kernelName }}
        run: |
          make O=${{ env.OUT_DIR }} -j$(nproc) \
            ARCH=${{ env.ARCH }} \
            CROSS_COMPILE=${{ env.CROSS_COMPILE }} \
            CROSS_COMPILE_ARM32=${{ env.CROSS_COMPILE_ARM32 }} \
            CLANG_TRIPLE=${{ env.CLANG_TRIPLE }} \
            CC=${{ env.CC }} \
            AR=${{ env.AR }} \
            LD=${{ env.LD }}

      - name: "📦 Install mkbootimg"
        run: |
          sudo apt-get update
          sudo apt-get install -y android-tools-mkbootimg

      - name: "🔗 Make boot.img"
        working-directory: ${{ env.kernelName }}
        run: |
          # 合成 dtb.img（目录 -> 合并）
          if [ -d ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb ]; then
            find ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb -type f -name "*.dtb" | sort | xargs cat > ${{ env.OUT_DIR }}/dtb.img
            DTB_ARG="--dtb ${{ env.OUT_DIR }}/dtb.img"
          else
            DTB_ARG=""
          fi

          # 使用官方 mkbootimg 打包
          mkbootimg \
            --kernel ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image \
            ${DTB_ARG} \
            --cmdline "" \
            --base 0x00000000 \
            --kernel_offset 0x00080000 \
            --ramdisk_offset 0x01000000 \
            --tags_offset 0x00000100 \
            --pagesize 4096 \
            -o ${{ env.OUT_DIR }}/boot.img

      - name: "🚀 Upload boot.img"
        uses: actions/upload-artifact@v4
        with:
          name: boot-KernelSU-thyme
          path: ${{ env.kernelName }}/${{ env.OUT_DIR }}/boot.img
          if-no-files-found: error
          retention-days: 7
