name: "Build KernelSU for oxygen"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Build-KernelSU:
    name: "🐎 DogDay-KernelSU (oxygen)"
    runs-on: ubuntu-latest

    env:
      kernelName: "DogDay-KernelSU"
      kernelRepo: "https://github.com/PixelExperience-Devices/kernel_xiaomi_oxygen"
      kernelBranch: "thirteen"
      kernelDevice: "oxygen"
      DEFCONFIG_NAME: "oxygen_defconfig"
      ARCH: "arm64"
      CROSS_COMPILE: "aarch64-linux-gnu-"
      CROSS_COMPILE_ARM32: "arm-linux-gnueabi-"
      CLANG_TRIPLE: "aarch64-linux-gnu-"
      CC: "clang"
      AR: "llvm-ar"
      LD: "ld.lld"

    steps:
      - name: "✨ Checkout"
        uses: actions/checkout@v4

      - name: "⭐ Install prerequisites"
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            bc bison build-essential curl flex git libssl-dev libelf-dev \
            libncurses5-dev lz4 liblz4-dev python3 wget unzip device-tree-compiler \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi llvm lld

      - name: "🌟 Clone kernel source"
        run: |
          git clone --depth=1 --branch ${{ env.kernelBranch }} ${{ env.kernelRepo }} ${{ env.kernelName }}

      - name: "🛠️ Clone toolchains"
        run: |
          git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gas/linux-x86 gas
          git clone --depth=1 -b 11 https://gitlab.com/ThankYouMario/android_prebuilts_clang-standalone clang

      - name: "🔧 Setup PATH"
        run: |
          echo "$(pwd)/gas"          >> $GITHUB_PATH
          echo "$(pwd)/clang/bin"    >> $GITHUB_PATH

      - name: "😋 Patch KernelSU"
        working-directory: ${{ env.kernelName }}
        run: |
          # 1. 检出 v0.9.5
          git clone --depth=1 --branch v0.9.5 https://github.com/tiann/KernelSU.git
          # 2. 官方 setup 会自动打补丁，无需手动 patch
          export KSU_VERSION=0.9.5
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/v0.9.5/kernel/setup.sh" | bash -
          # 3. 打开必要配置
          {
            echo "CONFIG_KSU=y"
            echo "CONFIG_KPROBES=y"
            echo "CONFIG_HAVE_KPROBES=y"
            echo "CONFIG_KPROBE_EVENTS=y"
            echo "CONFIG_OVERLAY_FS=y"
            echo "CONFIG_SECURITY_SELINUX=y"
          } >> arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "👍 Make defconfig"
        working-directory: ${{ env.kernelName }}
        run: |
          make O=${{ env.OUT_DIR }} ${{ env.DEFCONFIG_NAME }} \
            ARCH=${{ env.ARCH }} \
            CROSS_COMPILE=${{ env.CROSS_COMPILE }} \
            CROSS_COMPILE_ARM32=${{ env.CROSS_COMPILE_ARM32 }} \
            CLANG_TRIPLE=${{ env.CLANG_TRIPLE }} \
            CC=${{ env.CC }} \
            AR=${{ env.AR }} \
            LD=${{ env.LD }}

      - name: "🎶 Build kernel"
        working-directory: ${{ env.kernelName }}
        run: |
          make O=${{ env.OUT_DIR }} -j$(nproc) \
            ARCH=${{ env.ARCH }} \
            CROSS_COMPILE=${{ env.CROSS_COMPILE }} \
            CROSS_COMPILE_ARM32=${{ env.CROSS_COMPILE_ARM32 }} \
            CLANG_TRIPLE=${{ env.CLANG_TRIPLE }} \
            CC=${{ env.CC }} \
            AR=${{ env.AR }} \
            LD=${{ env.LD }}

      - name: "📦 打包 Image + dtb 为 zip"
        working-directory: ${{ env.kernelName }}
        run: |
          # 如果 dtb 是目录，就整个目录打包；如果是文件就单文件打包
          if [ -d ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb ]; then
            zip -r9 kernel-dtb.zip \
              ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image \
              ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb
          else
            zip -j9 kernel-dtb.zip \
              ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image \
              ${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb
          fi

      - name: "🚀 上传 Image + dtb zip"
        uses: actions/upload-artifact@v4
        with:
          name: kernel-dtb-oxygen
          path: ${{ env.kernelName }}/kernel-dtb.zip
          if-no-files-found: error
          retention-days: 7    
